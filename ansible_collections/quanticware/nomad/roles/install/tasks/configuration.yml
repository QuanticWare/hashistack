---
- name: "Nomad Configuration | Reload local facts to configure Nomad"
  ansible.builtin.setup:
    filter: ansible_local

- name: "Nomad Configuration | Insert Nomad Vault configuration"
  ansible.builtin.template:
    src: "vault.hcl.j2"
    dest: "{{ nomad_config_dir }}/vault.hcl"
    owner: nomad
    group: nomad
    mode: '0644'

- name: "Nomad Configuration | Docker configuration"
  block:
    - name: "Nomad Configuration | Insert Nomad docker configuration"
      ansible.builtin.template:
        src: "docker.hcl.j2"
        dest: "{{ nomad_config_dir }}/docker.hcl"
        owner: nomad
        group: nomad
        mode: '0644'

    - name: "Nomad Configuration | Add user nomad to docker group"
      ansible.builtin.user:
        name: "nomad"
        groups: docker
        append: yes
  when: nomad_docker_driver == true

- name: "Nomad Configuration | Podman configuration"
  block:
    - name: "Nomad Podman Configuration | Retrieve brut list from hashicorp.com"
      ansible.builtin.uri:
        url: "https://releases.hashicorp.com/nomad-driver-podman/"
        return_content: yes
      register: nomad_podman_driver_raw_list
      when: check_online_version == True

    - name: "Nomad Podman Configuration | Extract version number"
      ansible.builtin.set_fact:
        nomad_podman_driver_version: '{{ nomad_podman_driver_raw_list.content | regex_search("nomad-driver-podman_[\d.]{3,}<") | regex_replace("<","") | regex_search("\d.*") }}'
      when: check_online_version == True

    - ansible.builtin.debug:
        msg: "{{ nomad_podman_driver_version }}"

    - name: "Nomad Podman Configuration | Unarchive Nomad Podman driver for amd64"
      ansible.builtin.unarchive:
        src: https://releases.hashicorp.com/nomad-driver-podman/{{ nomad_podman_driver_version }}/nomad-driver-podman_{{ nomad_podman_driver_version }}_linux_amd64.zip
        dest: "/var/nomad/plugins"
        remote_src: yes
      when: ansible_architecture == "x86_64"

    - name: "Nomad Podman Configuration | Unarchive Nomad Podman driver for arm64"
      ansible.builtin.unarchive:
        src: https://releases.hashicorp.com/nomad-driver-podman/{{ nomad_podman_driver_version }}/nomad-driver-podman_{{ nomad_podman_driver_version }}_linux_arm64.zip
        dest: "/var/nomad/plugins"
        remote_src: yes
      when: ansible_architecture == "aarch64"

    - name: "Nomad Podman Configuration | Insert Nomad Podman rootless configuration"
      ansible.builtin.template:
        src: "podman_rootless.hcl.j2"
        dest: "{{ nomad_config_dir }}/podman_rootless.hcl"
        owner: nomad
        group: nomad
        mode: '0644'
      when: podman_rootless == true

    - name: "Nomad Podman Configuration | Insert Nomad Podman root configuration"
      ansible.builtin.template:
        src: "podman_rootfull.hcl.j2"
        dest: "{{ nomad_config_dir }}/podman_rootfull.hcl"
        owner: nomad
        group: nomad
        mode: '0644'
      when: podman_rootless == false
  when: nomad_podman_driver == true

- name: "Nomad Raw Configuration | Insert raw exec configuration"
  ansible.builtin.template:
    src: "raw_exec.hcl.j2"
    dest: "{{ nomad_config_dir }}/raw_exec.hcl"
    owner: nomad
    group: nomad
    mode: '0644'
  when: nomad_raw_exec_driver == true

- name: "Nomad Configuration | Restart Nomad"
  ansible.builtin.systemd:
    name: nomad
    state: restarted
    enabled: true
    daemon_reload: true

- name: "Nomad Configuration | Wait for Nomad started"
  ansible.builtin.wait_for:
    host: "{{ nomad_install_http_ip }}"
    port: "{{ nomad_install_http_port }}"
