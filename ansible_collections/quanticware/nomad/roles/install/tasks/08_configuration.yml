---
- block:
    - name: "Nomad | Consul ACL | Create Consul policy for Nomad"
      ansible.builtin.import_role:
        name: "quanticware.consul.operate"
        tasks_from: policy_create
      vars:
        consul_policy_name: nomad-agents
        consul_token_description: 'Policy for Nomad agents'
        consul_policy_rules: 'agent_prefix \"\" {\n  policy = \"read\"\n}\n\nnode_prefix \"\" {\n  policy = \"read\"\n}\n\nservice_prefix \"\" {\n  policy = \"write\"\n}\n'
      run_once: true

    - name: "Nomad | Consul Token | Create Consul token for Nomad"
      ansible.builtin.import_role:
        name: "quanticware.consul.operate"
        tasks_from: token_create
      vars:
        consul_token_name: "nomad"
        consul_policy_name: "nomad-agents"
      run_once: true
  when: nomad_acl == true

- name: "Nomad Install | Block Gossip Encryption Key"
  block:
  - name: Nomad Install | Generate Gossip Encryption Key
    ansible.builtin.command: "openssl rand -base64 32"
    register: nomad_encrypt_key_out
    when: nomad_encrypt_key is not defined

  - ansible.builtin.set_fact:
      nomad_encrypt_key: "{{ nomad_encrypt_key_out.stdout }}"
    when: nomad_encrypt_key is not defined

  - name: "Nomad Install | Insert Consul Encrypt key"
    ansible.builtin.blockinfile:
      path: "{{ hashistack_creds_file }}"
      marker: "#<!-- {mark} NOMAD ENCRYPT KEY ANSIBLE MANAGED BLOCK -->"
      block: |
        nomad_encrypt_key: "{{ nomad_encrypt_key }}"
      create: yes
    delegate_to: localhost
    become: false
  run_once: true

- name: "Nomad Configuration | Docker configuration"
  block:
    - name: "Nomad Install | Login to docker private registry"
      community.docker.docker_login:
        registry_url: "{{ nomad_install_docker_private_registry_url }}"
        username: "{{ nomad_install_docker_private_registry_username }}"
        password: "{{ nomad_install_docker_private_registry_password }}"
        config_path: "{{ nomad_install_docker_private_registry_config }}"
      when: nomad_install_docker_private_registry_state == true

    - name: "Nomad Configuration | Add user nomad to docker group"
      ansible.builtin.user:
        name: "nomad"
        groups: docker
        append: yes

    - name: "Nomad Configuration | Insert Nomad docker configuration"
      ansible.builtin.template:
        src: "docker.hcl.j2"
        dest: "{{ nomad_config_dir }}/docker.hcl"
        owner: nomad
        group: nomad
        mode: '0644'
  when:
  - nomad_node_role == 'client' or nomad_node_role == 'both'
  - nomad_docker_driver == true

- name: "Nomad Configuration | Podman configuration"
  block:
    - name: "Nomad Podman Configuration | Retrieve brut list from hashicorp.com"
      ansible.builtin.uri:
        url: "https://releases.hashicorp.com/nomad-driver-podman/"
        return_content: yes
      register: nomad_podman_driver_raw_list
      when: check_online_version == True

    - name: "Nomad Podman Configuration | Extract version number"
      ansible.builtin.set_fact:
        nomad_podman_driver_version: '{{ nomad_podman_driver_raw_list.content | regex_search("nomad-driver-podman_[\d.]{3,}<") | regex_replace("<","") | regex_search("\d.*") }}'
      when: check_online_version == True

    - ansible.builtin.debug:
        msg: "{{ nomad_podman_driver_version }}"

    - name: "Nomad Podman Configuration | Unarchive Nomad Podman driver for amd64"
      ansible.builtin.unarchive:
        src: https://releases.hashicorp.com/nomad-driver-podman/{{ nomad_podman_driver_version }}/nomad-driver-podman_{{ nomad_podman_driver_version }}_linux_amd64.zip
        dest: "/var/nomad/plugins"
        remote_src: yes
      when: ansible_architecture == "x86_64"

    - name: "Nomad Podman Configuration | Unarchive Nomad Podman driver for arm64"
      ansible.builtin.unarchive:
        src: https://releases.hashicorp.com/nomad-driver-podman/{{ nomad_podman_driver_version }}/nomad-driver-podman_{{ nomad_podman_driver_version }}_linux_arm64.zip
        dest: "/var/nomad/plugins"
        remote_src: yes
      when: ansible_architecture == "aarch64"

    - name: "Nomad Podman Configuration | Insert Nomad Podman rootless configuration"
      ansible.builtin.template:
        src: "podman_rootless.hcl.j2"
        dest: "{{ nomad_config_dir }}/podman_rootless.hcl"
        owner: nomad
        group: nomad
        mode: '0644'
      when: podman_rootless == true

    - name: "Nomad Podman Configuration | Insert Nomad Podman root configuration"
      ansible.builtin.template:
        src: "podman_rootfull.hcl.j2"
        dest: "{{ nomad_config_dir }}/podman_rootfull.hcl"
        owner: nomad
        group: nomad
        mode: '0644'
      when: podman_rootless == false
  when:
  - nomad_node_role == 'client' or nomad_node_role == 'both'
  - nomad_podman_driver == true

- name: "Nomad Raw Configuration | Insert raw exec configuration"
  ansible.builtin.template:
    src: "raw_exec.hcl.j2"
    dest: "{{ nomad_config_dir }}/raw_exec.hcl"
    owner: nomad
    group: nomad
    mode: '0644'
  when:
  - nomad_node_role == 'client' or nomad_node_role == 'both'
  - nomad_raw_exec_driver == true

- name: "Nomad Install | Copy configurations files"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ nomad_config_dir }}/{{ item.dest }}"
    owner: nomad
    group: nomad
    mode: '0644'
  loop:
  - { src: "nomad.env.j2", dest: "nomad.env" }
  - { src: "nomad.hcl.j2", dest: "nomad.hcl" }
  - { src: "consul.hcl.j2", dest: "consul.hcl" }
  - { src: "vault.hcl.j2", dest: "vault.hcl" }

- name: "Nomad Install | Copy TLS configuration file"
  ansible.builtin.template:
    src: "tls.hcl.j2"
    dest: "{{ nomad_config_dir }}/tls.hcl"
    owner: nomad
    group: nomad
    mode: '0644'
  when: nomad_tls == true

- name: "Nomad Install | Copy configurations files for servers"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ nomad_config_dir }}/{{ item.dest }}"
    owner: nomad
    group: nomad
    mode: '0644'
  loop:
  - { src: "server.hcl.j2", dest: "server.hcl" }
  when: nomad_node_role == 'server' or nomad_node_role == 'both'

- name: "Nomad Install | Copy configurations files for clients"
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ nomad_config_dir }}/{{ item.dest }}"
    owner: nomad
    group: nomad
    mode: '0644'
  loop:
  - { src: "client.hcl.j2", dest: "client.hcl" }
  when: nomad_node_role == 'client' or nomad_node_role == 'both'

- name: "Nomad Configuration | Restart Nomad"
  ansible.builtin.systemd_service:
    name: nomad
    state: restarted
    enabled: true
    daemon_reload: true

- name: "Nomad Configuration | Wait for Nomad started"
  ansible.builtin.wait_for:
    host: "{{ nomad_install_http_ip }}"
    port: "{{ nomad_install_http_port }}"

- name: "Nomad ACL | Generate Bootstrap token"
  ansible.builtin.uri:
    url: "{{ nomad_install_http_scheme }}://{{ nomad_install_http_ip }}:{{ nomad_install_http_port }}/v1/acl/bootstrap"
    ca_path: "{{ nomad_install_tls_host_certificate_dir }}/{{ nomad_install_tls_ca_pubkey }}"
    client_cert: "{{ nomad_install_tls_host_certificate_dir }}/{{ nomad_install_tls_cert_server }}"
    client_key: "{{ nomad_install_tls_host_certificate_dir }}/{{ nomad_install_tls_privatekey_server }}"
    method: POST
    body_format: json
    status_code:
        - 200
  register: nomad_management_token_result
  run_once: true
  when:
  - nomad_acl == true
  - nomad_management_token is not defined

- name: "Nomad ACL | Nomad management token in hashistack vars"
  ansible.builtin.blockinfile:
    path: "{{ hashistack_creds_file }}"
    marker: "#<!-- {mark} NOMAD MANAGEMENT TOKEN ANSIBLE MANAGED BLOCK -->"
    block: |
      nomad_management_token: "{{ nomad_management_token_result.json.SecretID }}"
    create: yes
  delegate_to: localhost
  become: no
  run_once: true
  when:
  - nomad_acl == true
  - nomad_management_token is not defined

- ansible.builtin.set_fact:
    nomad_management_token: "{{ nomad_management_token_result.json.SecretID }}"
  when:
  - nomad_acl == true
  - nomad_management_token is not defined

- name: "Nomad | Auto Eligibility | Install"
  ansible.builtin.import_role:
    name: "quanticware.nomad.autoeligibility"
  when:
  - nomad_acl == true
  - ansible_local.nomad_autoeligibility_token.nomad_autoeligibility_token is not defined
  - nomad_install_mode == 'single'

- name: "Nomad Configuration | Enable MemoryOversubscription"
  ansible.builtin.uri:
    url: "{{ nomad_install_http_scheme }}://{{ nomad_install_http_ip }}:{{ nomad_install_http_port }}/v1/operator/scheduler/configuration"
    ca_path: "{% if nomad_tls %}{{ nomad_install_tls_host_certificate_dir }}/{{ nomad_install_tls_ca_pubkey }}{% endif %}"
    client_cert: "{% if nomad_tls %}{{ nomad_install_tls_host_certificate_dir }}/{{ nomad_install_tls_cert_server }}{% endif %}"
    client_key: "{% if nomad_tls %}{{ nomad_install_tls_host_certificate_dir }}/{{ nomad_install_tls_privatekey_server }}{% endif %}"
    headers:
        X-Nomad-Token: "{% if nomad_acl %}{{ nomad_management_token_result.json.SecretID | default(nomad_management_token) }}{% endif %}"
    method: POST
    body_format: json
    body:
      MemoryOversubscriptionEnabled: true
    return_content: yes
    status_code:
      - 200
  when: nomad_node_role == 'server' or nomad_node_role == 'both'
  ignore_errors: true
