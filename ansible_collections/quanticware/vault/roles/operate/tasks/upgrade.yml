---
- name: "Vault | Upgrade | Install requiered binary"
  ansible.builtin.apt:
    name: unzip
    update_cache: yes

- name: "Vault | Upgrade | Check Vault latest version online"
  block:
    - name: "Vault | Upgrade | Retrieve brut list from hashicorp.com"
      ansible.builtin.uri:
        url: "https://releases.hashicorp.com/vault/"
        return_content: yes
      register: vault_brut_list

    - name: "Vault | Upgrade | Extract version number"
      ansible.builtin.set_fact:
        vault_version: '{{ vault_brut_list.content | regex_search("vault_[\d.]{3,}<") | regex_replace("<","") | regex_search("\d.*") }}'
  when: check_online_version == True

- name: "Vault | Upgrade | Check Vault installed version"
  ansible.builtin.command: vault version
  register: vault_installed_version

- name: "Vault | Upgrade | Upgrade process"
  block:
    - name: "Vault | Upgrade | Download and extract new version for ARM64"
      ansible.builtin.unarchive:
        src: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_arm64.zip"
        dest: "{{ vault_path }}"
        remote_src: yes
      when: ansible_architecture == "aarch64"

    - name: "Vault | Upgrade | Download and extract new version for ARM"
      ansible.builtin.unarchive:
        src: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_arm.zip"
        dest: "{{ vault_path }}"
        remote_src: yes
      when: ansible_architecture == "armv7l"

    - name: "Vault | Upgrade | Download and extract new version for x64"
      ansible.builtin.unarchive:
        src: "https://releases.hashicorp.com/vault/{{ vault_version }}/vault_{{ vault_version }}_linux_amd64.zip"
        dest: "{{ vault_path }}"
        remote_src: yes
      when: ansible_architecture == "x86_64"

    - name: "Vault | Upgrade | Restart Vault"
      ansible.builtin.systemd_service:
        name: vault
        state: restarted
  when: vault_version is not in vault_installed_version.stdout
